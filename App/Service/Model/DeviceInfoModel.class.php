<?php
/**
 * Created by PhpStorm.
 * User: lgq
 * Date: 16/11/11
 * Time: 上午8:56
 */

namespace Service\Model;

use Service\Utils\GroupInfoUtils;

class DeviceInfoModel extends BaseInfoModel
{

    protected $tableName = 'device_info';

    protected $_validate = array(
        array('group_name', 'require', '组织名称不能为空！'),
        array('device_no', 'require', '设备编号不能为空 或 设备编号重复!', self::MUST_VALIDATE, 'unique', self::MODEL_INSERT),
        array('bar_code', 'require', '条形编码不能为空 或 条形编码重复', self::MUST_VALIDATE, 'unique', self::MODEL_INSERT),
        array('device_type', 'require', '设备类型不能为空！'),
        array('is_video', 'require', '是否视频不能为空！'),
        array('is_video', 'require', '请选择正确的状态！', self::MUST_VALIDATE, '[1-2]', self::MODEL_BOTH),
        array('status', 'require', '设备状态不能为空！'),
        array('status', 'require', '请选择正确的设备状态！', self::MUST_VALIDATE, '[0-1]', self::MODEL_BOTH),
        array('channel_num', 'require', '所属行业不能为空！', self::MUST_VALIDATE, '[1-3]', self::MODEL_BOTH),
        array('device_type', array(1), '请选择正确的设备类型！', self::MUST_VALIDATE, 'in', self::MODEL_BOTH),
    );


    protected function search()
    {
        $map = array();

        $post_data = I('post.');

        if (isset($post_data['device_no']) && $post_data['device_no'] != '') {
            $map['device_no'] = array('LIKE', '%' . $post_data['device_no'] . '%');
        }

        if (isset($post_data['vehicle_id']) && $post_data['vehicle_id'] != '') {
            $map['vehicle_id'] = $post_data['vehicle_id'];
        }

        return $map;
    }


    protected function formatDataContent($data)
    {

        $wordModel = new WordBookModel();

        $Utils = new GroupInfoUtils();

        $BindSimCard = new DeviceSimCardBindModel();

        //格式化设备类型
        $cacheDeviceType = $wordModel->getMap(WordBookModel::TYPE_DEVICE_TYPE);

        $cacheYesNoStates = $wordModel->getMap(WordBookModel::TYPE_YES_NO_TYPE);

        $cacheDeviceStates = $wordModel->getMap(WordBookModel::TYPE_STATES_TYPE);

        $cacheDeviceChannel = $wordModel->getMap(WordBookModel::TYPE_CHANNEL_NUM_TYPE);


        $result['total'] = $data['total'];

        $result['data'] = array();


        foreach ($data['data'] as $k => $deviceInfo) {

            $temp = array();
            $temp['id'] = $deviceInfo['id'];

            $temp['device_no'] = $deviceInfo['device_no'];

            $temp['group_id'] = $deviceInfo['group_id'];

            $temp['group_name'] = $Utils->getGroupName($deviceInfo['group_id']);

            $temp['vehicle_id'] = $deviceInfo['vehicle_id'];
            $temp['vehicle_license_color'] = $deviceInfo['vehicle_license_color'];


            $bindSimcardInfo = $BindSimCard->getBindInfo($BindSimCard::Type_ASC, $deviceInfo['id']);

            $temp['simCard_id'] = $bindSimcardInfo['id'];

            $temp['simCard_no'] = $bindSimcardInfo['simcard_no'];


            $temp['device_type'] = $cacheDeviceType[$deviceInfo['device_type']];

            $temp['channel_num'] = $cacheDeviceChannel[$deviceInfo['channel_num']];

            $temp['is_video'] = $cacheYesNoStates[$deviceInfo['is_video']];

            $temp['manufacturer'] = $deviceInfo['manufacturer'];

            $temp['bar_code'] = $deviceInfo['bar_code'];

            $temp['status'] = $cacheDeviceStates[$deviceInfo['status']];
            $temp['manufacturer'] = $deviceInfo['manufacturer'];
            $temp['manufacturer'] = $deviceInfo['manufacturer'];
            $temp['device_no'] = $deviceInfo['device_no'];


            array_push($result['data'], $temp);

        }

        return $result;
    }

    protected function formatDataStructure($data)
    {

        return returnSearch($data['total'], $data['data']);

    }

    protected function getEffectMap($type)
    {

        if ('bind' == $type) {

            $bindModel = new DeviceSimCardBindModel();

            $bindInfo = $bindModel->getAllBindInfo();

            $usedDevice = array();

            foreach ($bindInfo as $info) {

                array_push($usedDevice, $info['device_id']);
            }

            $usedDevice = implode(',', $usedDevice);

            $map['id'] = array('not in', $usedDevice);

            return $map;


        } else {
            return parent::getEffectMap($type); // TODO: Change the autogenerated stub
        }

    }

    protected function getEffectField()
    {
        return 'id,device_no as text';
    }

    protected function formatEffect($data)
    {

        $res = array();

        $temp['id'] = '';
        $temp['text'] = '解绑设备';

        array_push($res, $temp);

        foreach ($data as $item) {
            array_push($res, $item);
        }

        return $res;


    }







//    /**
//     * @return array 返回表格列名称
//     */
//    protected function getColumnName(){
//        return array(
//            array('名称','上级名称','限制车辆数','类型','所属行业','负责人', '联系电话', '地址', '描述'),
//        );
//    }
//
//    /**
//     * @return array 返回表格列字段名称
//     */
//    protected function getTableFieldName(){
//        return array(
//            'group_name','parent_name','limit_num','group_type','industry','responsibility_people','tel_no','address','description'
//        );
//    }

    /**
     * @return string 返回导出文件名称
     */
    protected function getXlsName()
    {
        return '设备信息管理';
    }


    /**
     * 实例化父类CreateData方法
     * 添加数据函数
     * 业务逻辑:
     * 1、设备编号不能重名
     * 2、条形编码不能重名
     * 3、非车队下无法添加设备
     * 4、绑定SIM卡号码
     * 5、绑定车辆号码
     */
    public function CreateData()
    {
        // TODO: Implement CreateData() method.

        $post_data = I('post.');

        $Utils = new GroupInfoUtils();

        $group_id = $post_data['group_id'];

        if (2 == $Utils->getGroupType($group_id)) {

            $this->startTrans();

            $creatData = $this->create($post_data);

            $bandVehicleID = $post_data['vehicle_id'];

            $bandSimCardID = $post_data['simcard_id'];

            unset($creatData['id']);

            if ($creatData) {

                $res = $this->add($creatData);

                if (false !== $res) {

                    $newID = $res;

                    $BindSimCard = new DeviceSimCardBindModel();
                    $BindVehicle = new VehicleDeviceBindModel();

                    if ($bandSimCardID) {

                        //存在SIM卡绑定数据 添加一条绑定数据

                        $res = $BindSimCard->addBindInfo($BindSimCard::Type_ASC, $newID, $bandSimCardID);
                    } else {

                        //绑定数据不存在、删除可能存在绑定数据
                        $res = $BindSimCard->delBindInfo($BindSimCard::Type_ASC, $newID);
                    }

                    if ($res['Result']) {

                        //存在车辆绑定数据 添加一条绑定数据
                        if ($bandVehicleID) {

                            $res = $BindVehicle->addBindInfo($BindVehicle::Type_DESC, $bandVehicleID, $deviceID);
                        } else {

                            $res = $BindVehicle->delBindInfo($BindVehicle::Type_DESC, $deviceID);
                        }

                        if ($res['Result']) {

                            $this->commit();

                            action_log('User_Add', MODULE_NAME, session('UserInfo')['service_group_id']);

                            return returnSuccess('添加成功!');
                        } else {

                            $this->rollback();

                            return returnError($res['Msg']);
                        }
                    } else {

                        $this->rollback();

                        return returnError($res['Msg']);
                    }
                } else {

                    $this->rollback();

                    return returnError($this->getError());
                }

            } else {

                return returnError($this->getError());
            }
        } else {

            return returnError('非车队下无法添加设备');
        }


    }


    /**
     * 复写EditData 修改数据函数
     * 添加数据函数
     * 业务逻辑:
     * 1、设备编号不能重名
     * 2、条形编码不能重名
     * 3、非车队下无法添加设备
     * 4、绑定车辆号码
     * 5、绑定SIM卡号码
     */
    public function EditData()
    {

        if (IS_POST) {

            $post_data = I('post.');

            $this->startTrans();

            $creatData = $this->create($post_data);

            $bandVehicleID = $post_data['vehicle_id'];

            $bandSimCardID = $post_data['simcard_id'];

            $deviceID = $post_data['id'];

            unset($creatData['id']);

            if ($creatData) {

                $res = $this->where(array('id' => $deviceID))->save($creatData);

                if (false !== $res) {

                    $BindSimCard = new DeviceSimCardBindModel();

                    $BindVehicle = new VehicleDeviceBindModel();

                    if ($bandSimCardID) {

                        //存在SIM卡绑定数据 添加一条绑定数据
                        $res = $BindSimCard->addBindInfo($BindSimCard::Type_ASC, $deviceID, $bandSimCardID);
                    } else {

                        //绑定数据不存在、删除可能存在绑定数据
                        $res = $BindSimCard->delBindInfo($BindSimCard::Type_ASC, $deviceID);
                    }

                    if ($res['Result']) {

                        //存在车辆绑定数据 添加一条绑定数据
                        if ($bandVehicleID) {

                            $res = $BindVehicle->addBindInfo($BindVehicle::Type_DESC, $bandVehicleID, $deviceID);
                        } else {

                            $res = $BindVehicle->delBindInfo($BindVehicle::Type_DESC, $deviceID);
                        }


                        if ($res['Result']) {

                            $this->commit();

                            action_log('User_Add', MODULE_NAME, session('UserInfo')['service_group_id']);

                            return returnSuccess('修改成功!');
                        } else {

                            $this->rollback();

                            return returnError($res['Msg']);
                        }
                    } else {

                        $this->rollback();

                        return returnError($res['Msg']);
                    }


                } else {
                    $this->rollback();
                    return returnError($this->getError());
                }
            } else {

                return returnError($this->getError());
            }


        } else {
            return parent::EditData(); // TODO: Change the autogenerated stub
        }

    }


    /**
     * 复写父类ChangeGroup
     * 设备转组函数
     * 业务逻辑:
     * 1、未绑定设备直接转组
     * 2、绑定车辆的设备无法进行转组
     * 3、绑定SIM的设备转组将SIM一同转组
     */
    public function ChangeGroup()
    {

    }


}